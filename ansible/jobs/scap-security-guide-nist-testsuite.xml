<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>100</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.29.1">
      <projectUrl>http://github.com/OpenSCAP/scap-security-guide/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty plugin="leastload@2.0.1">
      <leastLoadDisabled>false</leastLoadDisabled>
    </org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.TextParameterDefinition>
          <name>SUITE_FILENAME</name>
          <description>Define suite filename. Important to determine if download is required or not.</description>
          <defaultValue>SCAP%20Content%20Validation%20Tool%201_2.zip</defaultValue>
          <trim>false</trim>
        </hudson.model.TextParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>SUITE_URL</name>
          <description>Used in combination of SUITE_FILENAME</description>
          <defaultValue>https://csrc.nist.gov/CSRC/media/Projects/Security-Content-Automation-Protocol/tools/scap/1.2/$SUITE_FILENAME</defaultValue>
          <trim>false</trim>
        </hudson.model.TextParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>WHITELIST</name>
          <description>What error messages we want to skip. Whole error message per line
ScapVal-1.2.14.1.zip should PASS without the need to whitelist
some specific ERROR.</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.TextParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.9.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>git://github.com/OpenSCAP/scap-security-guide.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout/>
      <hudson.plugins.git.extensions.impl.WipeWorkspace/>
    </extensions>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.SCMTrigger>
      <spec>@midnight</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.plugins.cmake.CmakeBuilder plugin="cmakebuilder@2.5.2">
      <installationName>InSearchPath</installationName>
      <workingDir>build</workingDir>
      <toolArgs>-DSSG_TARGET_OVAL_MINOR_VERSION:STRING=10
-DSSG_PRODUCT_CHROMIUM:BOOL=OFF
-DSSG_PRODUCT_DEBIAN8:BOOL=OFF
-DSSG_PRODUCT_FEDORA:BOOL=OFF
-DSSG_PRODUCT_FIREFOX:BOOL=OFF
-DSSG_PRODUCT_JBOSS_EAP6:BOOL=OFF
-DSSG_PRODUCT_JBOSS_FUSE6:BOOL=OFF
-DSSG_PRODUCT_JRE:BOOL=OFF
-DSSG_PRODUCT_OCP3:BOOL=OFF
-DSSG_PRODUCT_OL7:BOOL=OFF
-DSSG_PRODUCT_OPENSUSE:BOOL=OFF
-DSSG_PRODUCT_OSP7:BOOL=OFF
-DSSG_PRODUCT_SUSE11:BOOL=OFF
-DSSG_PRODUCT_SUSE12:BOOL=OFF
-DSSG_PRODUCT_UBUNTU14:BOOL=OFF
-DSSG_PRODUCT_UBUNTU16:BOOL=OFF
-DSSG_PRODUCT_WRLINUX:BOOL=OFF
-DSSG_JINJA2_CACHE_DIR=&quot;$WORKSPACE/../ssg_jinja2_cache&quot;</toolArgs>
      <generator>Unix Makefiles</generator>
      <sourceDir>.</sourceDir>
      <buildType>Release</buildType>
      <cleanBuild>true</cleanBuild>
      <toolSteps>
        <hudson.plugins.cmake.BuildToolStep>
          <args>rhel6 rhel7</args>
          <withCmake>false</withCmake>
        </hudson.plugins.cmake.BuildToolStep>
      </toolSteps>
    </hudson.plugins.cmake.CmakeBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
# Expected env. variables:
# - WHITELIST 
# - SUITE_FILENAME
# - SUITE_URL

set -e -o pipefail

# Download test suite if needed
SUITE_DIR=/tmp/nist_testsuite
SUITE_ZIP_DIR=&quot;/tmp/nist_testsuite_zip_$SUITE_FILENAME/&quot;

mkdir -p &quot;$SUITE_ZIP_DIR&quot;
mkdir -p &quot;$SUITE_DIR&quot;

pushd &quot;$SUITE_ZIP_DIR&quot; &amp;&amp; {
	wget -N &quot;$SUITE_URL&quot;
    if [ &quot;$(ls -1 *.zip | wc -l)&quot; != &quot;1&quot; ];
    then
    	# if same URL change output file, we will get
        # two files. It is hard to determine which is newer
        # so delete all files and download new one
        echo &quot;delete multiple files&quot;
    	rm *.zip
    	wget -N &quot;$SUITE_URL&quot;
    fi
	zip=$(ls -1 *.zip)
    
    # We cannot check if wget downloaded new file or used old
    # so we will check md5sum
    if [ ! -f &quot;./sum&quot; ]  || ! md5sum -c &quot;./sum&quot; || [ &quot;$(find \&quot;$SUITE_DIR/lib/\&quot; -name \&quot;scapval-*.jar\&quot; | wc -l 2&gt; /dev/null)&quot; == &quot;0&quot; ];
    then
    	echo &quot;md5sum does not match or jar is missing. Zip will be extracted&quot;
        
        md5sum &quot;$zip&quot; &gt; &quot;./sum&quot; # update md5sum
        
    	rm -rf &quot;$SUITE_DIR&quot; ; mkdir -p &quot;$SUITE_DIR&quot;
    	pushd &quot;$SUITE_DIR&quot; &amp;&amp; {	
        	unzip &quot;$SUITE_ZIP_DIR/$zip&quot;
			popd
        }
    else
    	echo &quot;Old zip will be used&quot;
    fi
    popd
    
}


SUITE_JAR=$(find &quot;$SUITE_DIR/lib/&quot; -name &apos;scapval-*.jar&apos;)
echo &quot;##################################################################&quot;
echo &quot;## Used testsuite $SUITE_JAR&quot;
echo &quot;## Whitelist:&quot;
echo &quot;$WHITELIST&quot;
echo &quot;##################################################################&quot;



function escapeXml {
	local str=&quot;$1&quot;
	echo &quot;$str&quot; | sed &apos;s|&lt;|\&amp;lt;|g&apos; | sed &apos;s|&gt;|\&amp;gt;|g&apos; | sed &quot;s|&apos;|\&amp;quot;|g&quot;
}

function isInWhitelist {
	local line=&quot;$1&quot;
	echo &quot;$WHITELIST&quot; | grep -F -q -x &quot;$line&quot;
}

function transformateResult {
	local resultFile=&quot;$1&quot;
	echo &apos;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&apos;
	echo &quot;&lt;testsuites tests=\&quot;\&quot; failures=\&quot;\&quot; disabled=\&quot;\&quot; errors=\&quot;0\&quot; timestamp=\&quot;$(date --iso-8601=seconds)\&quot; time=\&quot;0\&quot; name=\&quot;AllTests\&quot;&gt;&quot;
	# If no &apos;ERROR&apos; was found by ScapVal
	if ! grep --quiet &quot;^ERROR&quot; &quot;$resultFile&quot;
	then
		# Set $errors to empty string and $count to zero
		errors=&apos;&apos;
		count=0
	else
		# Otherwise obtain the actual errors and compute their count
		errors=$(grep &quot;^ERROR&quot; &quot;$resultFile&quot;)
		count=$(echo &quot;$errors&quot; | wc -l)
	fi
	echo &quot;&lt;testsuite name=\&quot;Errors\&quot; tests=\&quot;$count\&quot; failures=\&quot;0\&quot; disabled=\&quot;0\&quot; errors=\&quot;$count\&quot; time=\&quot;0\&quot;&gt;&quot;
	echo &quot;$errors&quot; | while read errorLine;
	do
		escapedLine=$(escapeXml &quot;$errorLine&quot;)
		name=$(echo &quot;$escapedLine&quot; | cut -d&apos; &apos; -f 2-8 )
		echo &quot;&lt;testcase name=\&quot;$name...\&quot; status=\&quot;run\&quot; time=\&quot;0\&quot; classname=\&quot;\&quot; &gt;&quot;
        if isInWhitelist &quot;$errorLine&quot;;
        then
        	echo &quot;&lt;skipped/&gt;&quot;
        else
        	echo &quot;&lt;error message=&apos;$escapedLine&apos; /&gt;&quot;
        fi
		echo &quot;&lt;/testcase&gt;&quot;
	done
	echo &quot;&lt;/testsuite&gt;&quot;
	echo &quot;&lt;/testsuites&gt;&quot;
}

exitVal=0
# Test RHEL/6 and RHEL/7 benchmark
for i in 6 7
do
	pushd build &amp;&amp; {
		result=$(mktemp -p &quot;$PWD&quot;)
	
		CLASSPATH=&quot;$SUITE_DIR&quot; java -Xmx600m -jar &quot;$SUITE_JAR&quot; -scapversion 1.2 -file &quot;$PWD/ssg-rhel$i-ds.xml&quot; | tee &quot;$result&quot;
		transformateResult &quot;$result&quot; &gt; &quot;$WORKSPACE/summary-rhel$i.xml&quot;

		# If at least one &apos;ERROR&apos; was found by ScapVal
		if grep &quot;ERROR&quot; &quot;$result&quot;
		then
			# Skip items in white list
			grep &quot;ERROR&quot; &quot;$result&quot; | while read errorLine;
			do
				isInWhitelist &quot;$errorLine&quot; || exit 1
			done || exitVal=1
		fi
	}
	popd
done
rm -rf build

exit $exitVal</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.junit.JUnitResultArchiver plugin="junit@1.24">
      <testResults>summary-rhel*.xml</testResults>
      <keepLongStdio>false</keepLongStdio>
      <healthScaleFactor>1.0</healthScaleFactor>
      <allowEmptyResults>false</allowEmptyResults>
    </hudson.tasks.junit.JUnitResultArchiver>
    <hudson.tasks.Mailer plugin="mailer@1.21">
      <recipients>openscap-maint@redhat.com</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers/>
</project>