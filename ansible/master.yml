---
- hosts: master

  become: yes
  become_method: sudo

  vars:
    jenkins_repo_url: https://pkg.jenkins.io/redhat/jenkins.repo
    jenkins_repo_key_url: https://pkg.jenkins.io/redhat/jenkins.io.key
    # this password file is currently not used
    admin_password_filepath: /var/lib/jenkins/secrets/openscapPassword
    important_jenkins_plugins:
      - github
      - github-oauth
      - ghprb
      - role-strategy

  tasks:
  - name: Mount the Jenkins data directory
    mount:
      path: /var/lib/jenkins
      src: /dev/sdb
      fstype: ext4
      state: present

  - name: Ensure Jenkins repo is enabled
    get_url:
      url: "{{ jenkins_repo_url }}"
      dest: /etc/yum.repos.d/jenkins.repo

  - name: Add Jenkins repo GPG key
    rpm_key:
      state: present
      key: "{{ jenkins_repo_key_url }}"

  - name: Ensure nginx (reverse proxy) repo is enabled
    copy:
      src: ./master_cfg/nginx.repo
      dest: /etc/yum.repos.d/nginx.repo

  - name: Ensure dependencies are installed
    package:
      name:
      - curl
      - libselinux-python
      - initscripts
      - java
      state: installed

  - name: Install Jenkins
    package:
      name: jenkins
      state: present

  - name: Set up Jenkins user
    user:
      name: jenkins
      comment: "Jenkins master user"
      home: /var/lib/jenkins/home
      move_home: yes
      generate_ssh_key: yes  # we will use this key to connect to workers

  - name: Fetch jenkins public key from master to local machine
    fetch:
      src: /var/lib/jenkins/home/.ssh/id_rsa.pub
      dest: generated_bits/master_id_rsa.pub
      flat: yes
      fail_on_missing: yes

  - name: Set up Jenkins start-up Java options
    lineinfile:
      dest: /etc/sysconfig/jenkins
      regexp: '^JENKINS_JAVA_OPTIONS='
      line: 'JENKINS_JAVA_OPTIONS="-Djava.awt.headless=true -Djenkins.install.runSetupWizard=false"'  # the setup wizard is a security risk

  - name: Set up Jenkins service
    service:
      name: jenkins
      enabled: yes
      state: started

  - name: Install nginx (reverse proxy)
    package:
      name: nginx
      state: installed

  - name: Set-up a directory for TLS certificates for nginx
    file:
      path: /etc/nginx/tls
      state: directory
      mode: 0755
      owner: root
      group: root

  - name: Check whether a TLS key for nginx is present
    stat:
      path: /etc/nginx/tls/server.key
    register: nginx_tls_key

# no clue if I am doing this right...
  - name: Generate self signed temporary TLS certificate for nginx
    command: openssl req -new -nodes -x509 -subj "/C=US/ST=Massachusetts/L=Boston/O=IT/CN=jenkins.open-scap.org" -days 365 -keyout /etc/nginx/tls/server.key -out /etc/nginx/tls/server.crt -extensions v3_ca creates=/etc/nginx/tls/server.crt
    when: nginx_tls_key.stat.exists == False  # only if letsencrypt's cert is missing

  - name: Config nginx (reverse proxy) with jenkins.conf
    copy:
      src: ./master_cfg/nginx_jenkins.conf
      dest: /etc/nginx/conf.d/jenkins.conf
    notify: restart nginx

  - name: Tell SELinux to let nginx (reverse proxy) connect to network
    seboolean:
      name: httpd_can_network_connect
      state: yes
      persistent: yes

  - name: Set up nginx (reverse proxy) service
    service:
      name: nginx
      enabled: yes
      state: started

  - name: Check admin password file
    stat:
      path: "{{ admin_password_filepath }}"
    register: admin_password_file

  - name: Slurp admin password from initialAdminPassword
    slurp:
      src: /var/lib/jenkins/secrets/initialAdminPassword
    register: admin_passfile_init
    when: admin_password_file.stat.exists == False

  - name: Slurp admin password from openscapPassword
    slurp:
      src: "{{ admin_password_filepath }}"
    register: admin_passfile_scap
    when: admin_password_file.stat.exists == True

  - name: Get admin password
    set_fact:
      admin_password: "{{ admin_passfile_scap if admin_password_file.stat.exists == True else admin_passfile_init }}"

  - name: Decode admin password
    set_fact:
      admin_password: "{{ admin_password['content'] | b64decode | trim }}" # it contained newline character

  - name: Install Jenkins plugins
    jenkins_plugin:
      name: "{{ item }}"
      state: absent
      url_username: admin
      url_password: "{{ admin_password }}"
    register: jenkins_plugins
    with_items: "{{ important_jenkins_plugins }}"

  - name: Restart Jenkins if new plugins got installed
    service:
      name: jenkins
      state: restarted
    when: jenkins_plugins.changed

  - name: Wait for Jenkins to start up
    uri:
      url: http://localhost:8080
      method: GET
      status_code: 200
      timeout: 5
      user: admin
      password: "{{ admin_password }}"
      force_basic_auth: yes
    register: jenkins_service_status
    # Empty jenkins starts in 4 seconds, 30 seconds should suffice
    retries: 15
    delay: 2
    until: >
       'status' in jenkins_service_status and
       jenkins_service_status['status'] == 200
    when: jenkins_plugins.changed


  - name: Jenkins plugin enabling
    jenkins_plugin:
      name: "{{ item }}"
      state: enabled
      url_username: admin
      url_password: "{{ admin_password }}"
    with_items: "{{ important_jenkins_plugins }}"
    notify: restart jenkins

  handlers:
  - name: restart nginx
    service: name=nginx state=restarted

  - name: restart jenkins
    service: name=jenkins state=restarted
